#!/usr/bin/env python
import rospy
from geometry_msgs.msg import Twist
import Robot
import time
import RPi.GPIO as GPIO

# Use board based pin numbering
GPIO.setmode(GPIO.BOARD)

class Driver:
    def __init__(self):
        rospy.init_node('driver')

        self._wheel_base = rospy.get_param('~wheel_base', 0.1)
        self._max_speed = rospy.get_param('~max_speed', 0.9)
        self._timeout = rospy.get_param('~timeout', 2)
        self._rate = rospy.get_param('~rate', 10)

        self._last_received = rospy.get_time()
        self._left_speed_percent = 0
        self._right_speed_percent = 0

        self._robot = Robot.Robot(left_trim=rospy.get_param('~left_trim', 0.0),
                                  right_trim=rospy.get_param('~right_trim', 0.0))

        rospy.Subscriber('joy_teleop/cmd_vel', Twist, self.velocity_received_callback)

    def stop(self):
        self._robot.stop()

    # Message handler
    def velocity_received_callback(self, message):
        self._last_received = rospy.get_time()

        # extract linear and angular velocities
        linear = message.linear.x
        angular = message.angular.z

        # Calculate wheel speeds in m/s
        left_speed = linear - angular*self._wheel_base/2
        right_speed = linear + angular*self._wheel_base/2

        self._left_speed_percent = 100 * left_speed/self._max_speed
        self._right_speed_percent = 100 * right_speed/self._max_speed
        print("%d: l: %f, r: %f" % (self._last_received, self._left_speed_percent, self._right_speed_percent))

    def run(self):
        rate = rospy.Rate(self._rate)

        while not rospy.is_shutdown():
            # If we haven't received new commands for a while, we
            # may have lost contact with the commander-- stop
            # moving
            delay = rospy.get_time() - self._last_received
            if delay < self._timeout:
                self._robot.left(self._left_speed_percent)
                self._robot.right(self._right_speed_percent)
            else:
                self._robot.left(0)
                self._robot.right(0)

            rate.sleep()

def main():
    driver = Driver()

    # Run driver. This will block
    driver.run()

if __name__ == '__main__':
    main()
